"""The game screen"""

from textual.app import ComposeResult
from textual.binding import Binding
from textual.reactive import reactive
from textual.screen import Screen
from textual.widgets import Footer

from choose_game_type import GameType, ChooseGameType
from field import Field
from game_header import GameHeader
from game_message import GameMessage
from mines_grid import MinesGrid


class Game(Screen[None]):
    """The welcome screen class"""

    BINDINGS = [
        Binding("n", "new_game", "New Game"),
        Binding("question_mark", "push_screen('help')", "Help", key_display="?"),
        Binding("q", "quit", "Quit"),
    ]

    game_type = reactive[GameType | None]
    field: reactive[Field | None]

    def compose(self) -> ComposeResult:
        yield GameHeader()
        yield MinesGrid()
        yield Footer()
        yield GameMessage()

    def game_playable(self, playable: bool) -> None:
        """Mark the game as playable, or not.

        Args:
            playable (bool): Should the game currently be playable?
        """
        self.query_one(GameHeader).active = playable
        self.query_one(MinesGrid).active = playable

    def action_new_game(self) -> None:
        """Start a new game."""

        def type_choosen(game_type_choosen: GameType) -> None:
            """Called when ChooseGameType is dismissed."""
            self.game_type = game_type_choosen

            self.field = Field(
                self.game_type.width, self.game_type.height, self.game_type.mines_prc
            )

            self.query_one(GameHeader).marked_mines = 0

            mines_grid = self.query_one(MinesGrid)
            mines_grid.field = self.field
            mines_grid.cursor_x = self.field.width // 2
            mines_grid.cursor_y = self.field.height // 2

            self.game_playable(True)

        self.app.push_screen(ChooseGameType(), type_choosen)
        self.query_one(GameMessage).hide()
        self.game_playable(False)

    def on_mines_grid_square_cleared(self, message: MinesGrid.SquareCleared) -> None:
        """Handler for the SquareCleared event generated by the MinesGrid"""
        game_header = self.query_one(GameHeader)
        game_header.cleared_squares = message.cleared
        game_header.total_squares = message.total

    def on_mines_grid_mine_marked(self, message: MinesGrid.MineMarked) -> None:
        """Handler for the MineMarked event generated by the MinesGrid"""
        game_header = self.query_one(GameHeader)
        game_header.marked_mines = message.marked
        game_header.total_mines = message.total

    def on_mines_grid_mine_exploded(self, message: MinesGrid.MineExploded) -> None:
        """Handler for the MineExploded event generated by the MinesGrid"""
        self.game_playable(False)
        self.query_one(GameMessage).show(False)

    def on_mines_grid_field_cleared(self, message: MinesGrid.FieldCleared) -> None:
        """Handler for the FieldCleared event generated by the MinesGrid"""
        self.game_playable(False)
        self.query_one(GameMessage).show(True)

    def on_mount(self) -> None:
        """Handler for the Mount event"""
        self.action_new_game()
